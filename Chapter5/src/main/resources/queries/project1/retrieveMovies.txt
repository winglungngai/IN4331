declare function local:getActor($startNode as element(), $id as xs:integer){
    let $actor:=$startNode/descendant-or-self::artist[@id=$id]
    return <actor>
            {$actor/first_name}
            {$actor/last_name}
            {$actor/birth_date}
        </actor>
};

let $ms:=doc("/movies/movies_alone.xml")/movies/movie
let $as:=doc("/movies/artists_alone.xml")/artists/artist

let $genre:=''
let $actorName:=''
let $directorName:=''
let $keyword:='his'
let $title:=''
let $earliest:=''
let $latest:=''

let $moviesByGenre:=for $movies in $ms[genre=$genre] where (($genre)) return $movies

for $movie in $ms where   
    (if($actorName) then 
        $movie/actor/@id=$as[contains(concat(first_name, ' ', last_name), $actorName)]/@id else(true())) and
    (if($directorName) then 
        $movie/director/@id=$as[contains(concat(first_name, ' ', last_name), $directorName)]/@id else(true())) and
    (if($genre) then $movie[genre=$genre] else(true())) and
    (if($keyword) then $movie[contains(summary, $keyword)] else(true())) and
    (if($title) then $movie[contains(title, $title)] else(true())) and
    (if($earliest and $latest) then $movie[year>=number($earliest) and year<=number($latest)] else(true())) and
    (if (($actorName) or ($directorName) or ($genre) or 
        ($keyword) or ($earliest and $latest) or ($title)) then true() else(not(true())))
    return <movie>
            {$movie/title}
            {$movie/year}
            {$movie/genre}
            {$movie/summary}
            {$movie/country}
            <director>
                {local:getActor($as/.., $movie/director/@id)}
            </director>
            <actors>
            {
                let $actors:=$movie/actor
                for $actor in $actors return local:getActor($as/.., $actor/@id)
            }
            </actors>
        </movie>